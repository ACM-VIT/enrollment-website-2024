// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Round {
  id         String      @id @default(cuid())
  number     Int
  domain     Domain
  active     Boolean
  type       RoundType
  eliminates Boolean
  announced  Boolean
  RoundUser  RoundUser[]
  Question   Question[]

  @@unique([domain, number])
}

enum RoundType {
  form
  interview
  task
}

model RoundUser {
  id             String          @id @default(cuid())
  roundId        String
  userId         String
  round          Round           @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  status         RoundStatus     @default(pending)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  formSubmission FormSubmission?

  @@unique([roundId, userId])
}

enum RoundStatus {
  pending
  evaluate
  promoted
  rejected
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  phone              String?
  accounts           Account[]
  sessions           Session[]
  push_subscriptions Subscription[]
  RoundUser          RoundUser[]
}

model Subscription {
  id        String   @id @default(cuid())
  endpoint  String
  p256dh    String
  auth      String
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Domain {
  cc
  web
  app
  research
  management
  design
}

model FormSubmission {
  id              String     @id @default(cuid())
  roundUser       RoundUser  @relation(fields: [roundUserId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  formSubmittedAt DateTime?
  responses       Response[]
  roundUserId     String     @unique
  valid           Boolean
}

model Question {
  id         String           @id @default(cuid())
  question   String
  helpText   String?
  round      Round            @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId    String
  type       Type
  options    String[]
  varName    String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  responses  Response[]
  validators ValidationRule[]
}

enum Type {
  stq
  ltq
  scq
  mcq
}

model Response {
  id         String         @id @default(cuid())
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  submission FormSubmission @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId     String
  response   String?
  error      Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([questionId, formId])
}

model ValidationRule {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  ruleType   RuleType
  ruleValue  String?
  priority   Int
  helpText   String
  helpTitle  String
}

enum RuleType {
  requiredIf
  required
  min
  max
  pattern
  custom
}

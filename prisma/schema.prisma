// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Config {
  id        String     @id @default(cuid())
  key       ConfigKeys @unique
  value     Boolean
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum ConfigKeys {
  accept_form_responses
  round1_results_announced
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  registrations Registration[]
}

enum Domain {
  cc
  web
  app
  research
  management
  design
}

model Registration {
  id              String     @id @default(cuid())
  domain          Domain
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  formSubmittedAt DateTime?
  responses       Response[]

  @@unique([domain, userId])
}

model Question {
  id        String     @id @default(cuid())
  question  String
  domain    Domain
  type      Type
  varName   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  responses Response[]
}

enum Type {
  stq
  ltq
  scq
  mcq
}

model Response {
  id             String       @id @default(cuid())
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  registrationId String
  response       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([questionId, registrationId])
}
